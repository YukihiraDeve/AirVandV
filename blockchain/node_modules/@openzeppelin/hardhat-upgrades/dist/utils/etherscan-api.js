"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyAndGetStatus = exports.RESPONSE_OK = exports.getEtherscanInstance = exports.callEtherscanApi = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const undici_1 = require("undici");
const debug_1 = __importDefault(require("./debug"));
const etherscan_1 = require("@nomicfoundation/hardhat-verify/etherscan");
/**
 * Call the configured Etherscan API with the given parameters.
 *
 * @param etherscan Etherscan instance
 * @param params The API parameters to call with
 * @returns The Etherscan API response
 */
async function callEtherscanApi(etherscan, params) {
    const parameters = new URLSearchParams({ ...params, apikey: etherscan.apiKey });
    const response = await (0, undici_1.request)(etherscan.apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: parameters.toString(),
    });
    if (!(response.statusCode >= 200 && response.statusCode <= 299)) {
        const responseBodyText = await response.body.text();
        throw new upgrades_core_1.UpgradesError(`Etherscan API call failed with status ${response.statusCode}, response: ${responseBodyText}`);
    }
    const responseBodyJson = await response.body.json();
    (0, debug_1.default)('Etherscan response', JSON.stringify(responseBodyJson));
    return responseBodyJson;
}
exports.callEtherscanApi = callEtherscanApi;
/**
 * Gets an Etherscan instance based on Hardhat config.
 * Throws an error if Etherscan API key is not present in config.
 */
async function getEtherscanInstance(hre) {
    const etherscanConfig = hre.config.etherscan; // This should never be undefined, but check just in case
    const chainConfig = await etherscan_1.Etherscan.getCurrentChainConfig(hre.network.name, hre.network.provider, etherscanConfig?.customChains ?? []);
    return etherscan_1.Etherscan.fromChainConfig(etherscanConfig?.apiKey, chainConfig);
}
exports.getEtherscanInstance = getEtherscanInstance;
exports.RESPONSE_OK = '1';
async function verifyAndGetStatus(params, etherscan) {
    const response = await etherscan.verify(params.contractAddress, params.sourceCode, params.contractName, params.compilerVersion, params.constructorArguments);
    return etherscan.getVerificationStatus(response.message);
}
exports.verifyAndGetStatus = verifyAndGetStatus;
//# sourceMappingURL=etherscan-api.js.map